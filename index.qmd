---
title: "AI's Coming Wave: Impact Analysis for City Workers"
subtitle: "Interactive Dashboard and Strategic Timeline"
author: "Policy Analysis Team"
date: "June 18, 2025"
format: 
  html:
    theme: cosmo
    toc: true
    toc-depth: 3
    code-fold: true
    fig-width: 8
    fig-height: 6
    html-meta:
      robots: "noindex, nofollow"
jupyter: python3
execute:
  echo: false
  warning: false
  message: false
---

```{python}
#| label: setup
#| include: false

# Standard import block following setup guide
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# Set style
sns.set_style("whitegrid")
plt.rcParams['figure.figsize'] = (8, 6)
plt.rcParams['font.size'] = 10

# Professional color palette
colors = {
    'critical': '#d32f2f',
    'high': '#f57c00', 
    'medium': '#fbc02d',
    'low': '#388e3c',
    'political': '#1976d2',
    'economic': '#7b1fa2',
    'implementation': '#0097a7',
    'protected': '#4caf50'
}

print("✅ Environment loaded successfully")
print("✅ Seaborn version:", sns.__version__)
print("✅ Pandas version:", pd.__version__)
```

# Executive Summary

:::{.callout-important}
## Key Findings

- **Timeline Convergence**: The "Perfect Storm" period of 2030-2032 represents unprecedented conditions for workforce transformation
- **Fiscal Pressure**: NYC's reserves will be depleted by 2028, creating sustained pressure through 2032
- **Implementation Waves**: AI adoption follows predictable patterns across three waves from 2027-2032
- **Strategic Positioning**: Technical workers (like OMD) face opportunity rather than displacement
- **Workforce Scale**: Analysis based on NYC's actual 362,640 municipal workers across all agencies
- **Technology Workers**: 8,918 total (OTI: 1,666 + 2% from each agency: 7,252)
:::

# The Reality Check You Need to Hear

While you're reading this, 513 people lost their jobs to AI today—but none of them worked for NYC government. That 4-5 year head start the private sector has on AI adoption isn't just an academic observation—it's your window to prepare for what's coming.

Microsoft just eliminated 6,000 positions in May 2025, with 40% targeting software engineers. IBM cut 8,000 more as AI agents took over HR functions. Meanwhile, NYC government is still debating AI ethics policies and running 18-month procurement processes. This lag isn't permanent protection—it's borrowed time.

**Bottom line up front:** AI displacement in NYC government follows a predictable timeline shaped by politics, procurement, and fiscal reality. The fiscal timeline has accelerated, creating a compressed but more intense transformation window than originally projected.

# Private vs. Public Sector AI Adoption

Private companies can pivot in quarters; NYC government pivots in election cycles. This fundamental difference creates a staggered displacement timeline, but fiscal pressure is rapidly closing the traditional gap.

## Private Sector Implementation Patterns

Private sector AI adoption follows immediate economic imperatives. When revenue drops, companies implement AI solutions within months to cut costs and maintain competitiveness:

- **Immediate implementation:** CEO decisions become reality in months, not years
- **Economic pressure response:** Revenue drops mean instant layoffs
- **Risk tolerance:** Early adoption provides competitive advantage
- **77% of businesses already using or evaluating AI tools**

**Private sector experience provides the roadmap for government implementation.** JPMorgan's AI contract review system (COIN) replaced work that required 360,000 lawyer hours annually, reorganizing entire departments around AI-human collaboration models that government agencies now study under accelerated timelines. Walmart and Target's automation eliminated 28,000 logistics jobs while creating new roles in AI system monitoring, exception handling, and human-AI coordination that provide templates for government transformation.

## Government Implementation Constraints (Rapidly Changing)

Government operations face institutional constraints that create temporary protection but also delayed adaptation. However, fiscal crisis is rapidly altering these traditional barriers:

- **Procurement delays:** Traditional 12-18 months compressed to 8-12 months for essential AI systems during fiscal crisis
- **Political cycles:** Changes happen every 4 years, not every quarter
- **Fiscal cushion:** NYC's property tax buffer provides limited protection from immediate economic pressure
- **Union protection:** Collective bargaining creates additional barriers to rapid change

**The fiscal crisis creates "emergency efficiency" protocols** that accelerate typical government processes. Political approval processes now bypass some traditional consultation requirements when AI systems are classified as emergency efficiency measures.

# The Cuomo Factor: Politics Meet Automation

Andrew Cuomo's mayoral campaign isn't just political theater—it's your timeline indicator. Currently leading Democratic primary polls despite his scandals, Cuomo represents the political conditions that enable workforce transformation. His potential election timeline aligns almost perfectly with the fiscal and technological pressures facing the city.

## First Term Constraints (2026-2029): Building Under Pressure

If elected, Cuomo faces typical first-term limitations that protect current workers, but accelerated fiscal pressure changes the dynamics:

- **Union cooperation needed:** Major workforce changes require union buy-in for future political support
- **"Smart Government" positioning:** AI framed as efficiency enhancement, not job replacement
- **Strategic attrition accelerates:** Natural retirements not backfilled, hiring freezes already implemented become near-total by 2027
- **Technology infrastructure:** Focus on building AI capabilities during the fiscal pressure period

## Second Term Freedom (2030-2033): Perfect Storm 

Political dynamics shift dramatically in a second term, aligning with the convergence conditions detailed in the timeline analysis below.

# NYC's Fiscal Reality and Historical Context

Your job security depends more on property tax cycles than AI capabilities. Understanding both the historical patterns of municipal fiscal crises and NYC's specific timeline provides crucial context for the coming transformation.

## Historical Context: Learning from the Great Recession

The Great Recession (December 2007 - June 2009) provides essential insights for understanding NYC's coming fiscal challenges and the extended timeline for municipal transformation.

Municipal governments face different economic dynamics than private sector organizations. Property tax revenues, which comprise 50% of NYC's income, lag economic changes by 1-2 years due to assessment cycles. Historical evidence shows that while the Great Recession officially lasted 18 months, municipal budget cuts continued 4+ years after it ended.

## NYC's Fiscal Timeline (2026-2032)

**Critical Assumption:** This analysis assumes a significant economic recession beginning in 2026, which will accelerate fiscal pressures and compress the timeline for government AI adoption.

**The Depletion (2026-2028):**
Recent projections show NYC's fiscal buffer operates on a compressed timeline:

- **Property tax lag:** 50% of city revenue remains stable for 2-3 years post-recession
- **Reserve funds:** Depleted by 2028, not 2029 as previously projected
- **Income tax delays:** Even immediate economic impacts take 12-18 months to affect collections

```{python}
#| label: fiscal-projections

# NYC Fiscal Timeline with corrected starting point and depletion timeline
years = np.array(range(2025, 2036))
base_reserves = 8.5  # Corrected to $8.5 billion as per your HackMD document

# Define scenarios based on HackMD document
scenarios = {
    'Optimistic': {
        'recession_start': 2027,
        'recession_severity': 0.7,
        'recovery_speed': 1.3,
        'depletion_year': 2029
    },
    'Realistic': {
        'recession_start': 2026,
        'recession_severity': 1.0,
        'recovery_speed': 1.0,
        'depletion_year': 2028  # As stated in HackMD: "depleted by 2028"
    },
    'Pessimistic': {
        'recession_start': 2026,
        'recession_severity': 1.4,
        'recovery_speed': 0.7,
        'depletion_year': 2027
    }
}

plt.figure(figsize=(8.5, 6))  # Made smaller

# Plot each scenario
for scenario_name, params in scenarios.items():
    reserves = []
    for year in years:
        if year < params['recession_start']:
            # Pre-recession stability
            reserve_level = base_reserves * (0.98 ** (year - 2025))
        elif year < params['depletion_year']:
            # Recession decline
            years_in_recession = year - params['recession_start'] + 1
            decline_rate = 0.45 * params['recession_severity']
            reserve_level = base_reserves * (1 - decline_rate) ** years_in_recession
        elif year <= 2032:
            # Crisis period - very low reserves
            reserve_level = max(0.1, base_reserves * 0.02)
        else:
            # Recovery
            years_in_recovery = year - 2032
            recovery_rate = 0.2 * params['recovery_speed']
            reserve_level = base_reserves * 0.02 * (1 + recovery_rate) ** years_in_recovery
        
        reserves.append(max(0, reserve_level))
    
    # Line style based on scenario
    if scenario_name == 'Realistic':
        plt.plot(years, reserves, linewidth=3, label=scenario_name, color=colors['critical'])
    elif scenario_name == 'Optimistic':
        plt.plot(years, reserves, linewidth=2, linestyle='--', label=scenario_name, color=colors['low'])
    else:
        plt.plot(years, reserves, linewidth=2, linestyle=':', label=scenario_name, color=colors['high'])

# Add uncertainty band around realistic scenario
realistic_reserves = []
for year in years:
    if year < 2026:
        reserve_level = base_reserves * (0.98 ** (year - 2025))
    elif year < 2028:
        years_in_recession = year - 2026 + 1
        decline_rate = 0.45
        reserve_level = base_reserves * (1 - decline_rate) ** years_in_recession
    elif year <= 2032:
        reserve_level = max(0.1, base_reserves * 0.02)
    else:
        years_in_recovery = year - 2032
        recovery_rate = 0.2
        reserve_level = base_reserves * 0.02 * (1 + recovery_rate) ** years_in_recovery
    realistic_reserves.append(max(0, reserve_level))

# Add uncertainty band
upper_bound = [r * 1.3 for r in realistic_reserves]
lower_bound = [r * 0.7 for r in realistic_reserves]
plt.fill_between(years, lower_bound, upper_bound, alpha=0.2, color=colors['critical'])

# Key events annotations
plt.axvspan(2029, 2029, alpha=0.3, color='orange', label='Pressure Cooker Year')
plt.axvspan(2030, 2032, alpha=0.2, color='red', label='Perfect Storm Period')

plt.axhline(y=1.0, color='red', linestyle='--', alpha=0.7, label='Critical Reserve Level')

# Annotations for key events - using different colors
plt.annotate('Reserve\nDepletion', xy=(2028, 0.3), xytext=(2025.5, 2),
             arrowprops=dict(arrowstyle='->', color=colors['economic']), 
             fontweight='bold', color=colors['economic'])

plt.annotate('Perfect Storm\nStarts', xy=(2030, 0.1), xytext=(2031.5, 1.5),
             arrowprops=dict(arrowstyle='->', color=colors['implementation']), 
             fontweight='bold', color=colors['implementation'])

# Formatting
plt.xlabel('Year', fontweight='bold')
plt.ylabel('Reserve Funds (Billions $)', fontweight='bold')
plt.title('💰 NYC Fiscal Reality: Reserve Depletion Timeline\nThree Scenarios with Uncertainty Band', 
          fontweight='bold', fontsize=11, pad=15)

plt.legend(loc='upper right', fontsize=9)
plt.grid(True, alpha=0.3)
plt.xlim(2025, 2035)
plt.ylim(0, 9)

plt.tight_layout()
plt.show()

# Key fiscal milestones
print("\n💰 Key Fiscal Milestones:")
print("📅 2025: Reserve funds at $8.5 billion")
print("📅 2026: Economic recession begins")
print("📅 2028: Reserve funds depleted (realistic scenario)")
print("📅 2029: Pressure cooker year - peak fiscal stress")
print("📅 2030-2032: Perfect Storm period - sustained crisis enables transformation")
print("📅 2033+: Gradual recovery begins")
```

**The Extended Pressure Period (2029-2032):**
Applying historical municipal crisis patterns to NYC's situation, fiscal pressure will persist longer than broad economic indicators suggest. This creates the unique window where sustained crisis enables organizational transformation.

Translation for workers: The fiscal mathematics suggest **2030-2032** as the extended transformation period when AI adoption shifts from "efficiency enhancement" to "fiscal necessity."

# 🗓️ Master Timeline: The Perfect Storm Convergence

```{python}
#| label: timeline-fixed

# Create a clearer timeline visualization using matplotlib
years = list(range(2026, 2035))
fig, ax = plt.subplots(figsize=(8.5, 6))

# Define timeline phases with clear periods
timeline_phases = [
    # Political Timeline
    {'name': 'Cuomo First Term\n(Constraints)', 'start': 2026, 'end': 2029, 'level': 3, 'color': colors['political'], 'category': 'Political'},
    {'name': 'Cuomo Second Term\n(Freedom)', 'start': 2030, 'end': 2033, 'level': 3, 'color': colors['political'], 'category': 'Political'},
    
    # Economic Timeline  
    {'name': 'Economic Recession', 'start': 2026, 'end': 2029, 'level': 2.5, 'color': colors['economic'], 'category': 'Economic'},
    {'name': 'Reserve Depletion', 'start': 2026, 'end': 2028, 'level': 2.3, 'color': colors['high'], 'category': 'Economic'},
    {'name': 'Pressure Cooker', 'start': 2029, 'end': 2029, 'level': 2.7, 'color': colors['critical'], 'category': 'Economic'},
    {'name': 'Extended Crisis', 'start': 2030, 'end': 2032, 'level': 2.5, 'color': colors['critical'], 'category': 'Economic'},
    
    # Implementation Waves
    {'name': 'Wave 1: DOF/311', 'start': 2027, 'end': 2029, 'level': 2, 'color': colors['implementation'], 'category': 'AI Implementation'},
    {'name': 'Wave 2: OMB/DOB', 'start': 2028, 'end': 2030, 'level': 1.8, 'color': colors['implementation'], 'category': 'AI Implementation'},
    {'name': 'Wave 3: HRA', 'start': 2030, 'end': 2032, 'level': 2.2, 'color': colors['implementation'], 'category': 'AI Implementation'},
    
    # Worker Impact
    {'name': 'Strategic Attrition', 'start': 2027, 'end': 2028, 'level': 1.5, 'color': colors['medium'], 'category': 'Worker Impact'},
    {'name': 'Preparation Phase', 'start': 2029, 'end': 2029, 'level': 1.3, 'color': colors['critical'], 'category': 'Worker Impact'},
    {'name': 'Displacement Peak', 'start': 2030, 'end': 2032, 'level': 1.5, 'color': colors['critical'], 'category': 'Worker Impact'},
]

# Plot each phase as a horizontal bar
for phase in timeline_phases:
    duration = phase['end'] - phase['start'] + 1
    if duration == 1:  # Single year events
        ax.scatter(phase['start'], phase['level'], s=200, color=phase['color'], alpha=0.8, zorder=3)
        # Adjust text position for preparation phase - bring it closer to the dot
        if phase['name'] == 'Preparation Phase':
            ax.annotate(phase['name'], (phase['start'], phase['level']), 
                       xytext=(0, -15), textcoords='offset points', ha='center', va='top',
                       fontsize=8, bbox=dict(boxstyle='round,pad=0.3', facecolor='white', alpha=0.8))
        else:
            ax.annotate(phase['name'], (phase['start'], phase['level']), 
                       xytext=(0, 15), textcoords='offset points', ha='center', va='bottom',
                       fontsize=8, bbox=dict(boxstyle='round,pad=0.3', facecolor='white', alpha=0.8))
    else:  # Multi-year phases
        ax.barh(phase['level'], duration, left=phase['start'], height=0.15, 
                color=phase['color'], alpha=0.7, label=phase['name'])
        # Add text label in center of bar
        ax.text(phase['start'] + duration/2, phase['level'], phase['name'], 
                ha='center', va='center', fontsize=8, fontweight='bold', color='white')

# Perfect Storm highlight
ax.axvspan(2030, 2032, alpha=0.2, color='red', zorder=1)
ax.text(2031, 3.5, 'PERFECT STORM\n2030-2032', ha='center', va='center', 
        fontsize=11, fontweight='bold', color='red',
        bbox=dict(boxstyle='round,pad=0.5', facecolor='white', edgecolor='red', linewidth=2))

# Customize plot
ax.set_xlim(2025.5, 2034.5)
ax.set_ylim(1, 4)
ax.set_xlabel('Year', fontweight='bold')
ax.set_title('🕐 NYC AI Timeline: Perfect Storm Convergence\nFour Forces Driving Transformation', 
             fontsize=12, fontweight='bold', pad=20)

# Add category labels on y-axis
category_positions = {'Worker Impact': 1.5, 'AI Implementation': 2, 'Economic': 2.5, 'Political': 3}
ax.set_yticks(list(category_positions.values()))
ax.set_yticklabels(list(category_positions.keys()), fontweight='bold')

# Grid and styling
ax.grid(True, alpha=0.3)
ax.set_axisbelow(True)

# Set x-axis ticks
ax.set_xticks(years)
ax.set_xticklabels(years, rotation=45)

plt.tight_layout()
plt.show()
```

:::{.callout-note}
## Timeline Analysis

The visualization above reveals the critical **2030-2032 convergence period** where:
- **Political constraints** are removed (Cuomo's second term)
- **Fiscal pressure** reaches sustained crisis levels  
- **AI technology** achieves implementation maturity
- **Worker displacement** becomes politically acceptable
:::

### 🔍 **The Perfect Storm: When Everything Converges (2030-2032)**

**2030-2032** becomes the critical transformation period when four forces converge:

1. **🏛️ Political Freedom:** Cuomo's potential second term removes electoral constraints
2. **💰 Extended Fiscal Crisis:** Historical municipal patterns show pressure lasting 3+ years post-recession
3. **🤖 Technology Maturity:** 3-4 years of AI pilot data proves effectiveness
4. **📊 Implementation Imperative:** Sustained crisis creates the "efficiency or insolvency" narrative

**2029: The Pressure Cooker Year** represents the critical preparation phase when fiscal reality reaches peak intensity, but political constraints create a planning period that sets the stage for comprehensive implementation.

# Department-by-Department Risk Assessment

Not all city workers face equal risk. AI adoption follows the wave pattern outlined in the timeline above, based on return on investment, political sensitivity, and implementation complexity.

```{python}
#| label: data-foundation
#| echo: true

# Department Risk Assessment Data - Updated with accurate NYC agency headcount (362,640 total)
dept_risk_data = {
    'Department': ['Dept of Finance', '311 Service', 'Administrative (Other)', 'Basic Permit Processing',
                   'Office of Technology', 'Dept Buildings', 'HRA/Social Services', 'NYPD', 'FDNY', 
                   'Dept Sanitation', 'Dept of Correction', 'DOE (Education)', 'Health + Hospitals', 
                   'Children\'s Services', 'Health & Mental Hygiene', 'Environmental Protection', 
                   'Transportation', 'Parks & Recreation'],
    'Workers': [2026, 800, 22400, 3200, 8918, 1800, 21425, 50600, 17500, 9700, 7500, 138662, 45000, 
                6455, 5370, 6320, 5762, 3745],
    'Risk_Level': ['High', 'High', 'High', 'High', 'Evolution', 'Medium', 'Medium', 'Protected', 'Protected', 
                   'Medium', 'Medium', 'Medium', 'Medium', 'Medium', 'Medium', 'Low', 'Low', 'Low'],
    'Timeline_Start': [2027, 2027, 2027, 2028, 2027, 2028, 2029, 2035, 2035, 2030, 2030, 2030, 2029, 
                       2030, 2029, 2032, 2032, 2032],
    'Timeline_End': [2032, 2031, 2032, 2032, 2029, 2032, 2033, 2040, 2040, 2035, 2035, 2035, 2032, 
                     2033, 2032, 2037, 2037, 2037],
    'Union_Protection': [2, 1, 1, 2, 3, 3, 4, 5, 5, 4, 4, 4, 3, 4, 3, 3, 3, 4],  # 1-5 scale
    'Political_Sensitivity': [2, 1, 1, 2, 2, 3, 4, 5, 5, 3, 3, 4, 4, 4, 4, 3, 3, 3]  # 1-5 scale
}

df_dept_risk = pd.DataFrame(dept_risk_data)

# Display summary statistics
print("📋 Department Risk Assessment Data Structure (Accurate NYC Workforce):")
print(f"📊 Total Workers Analyzed: {df_dept_risk['Workers'].sum():,}")
print(f"🏢 Departments/Agencies Covered: {len(df_dept_risk)}")
print(f"⚠️ High Risk Departments: {len(df_dept_risk[df_dept_risk['Risk_Level'] == 'High'])}")
print(f"🛡️ Protected Departments: {len(df_dept_risk[df_dept_risk['Risk_Level'] == 'Protected'])}")
print("\n🎯 Key Agency Breakdown:")
print(f"• DOE (Education): {df_dept_risk[df_dept_risk['Department'] == 'DOE (Education)']['Workers'].iloc[0]:,}")
print(f"• NYPD: {df_dept_risk[df_dept_risk['Department'] == 'NYPD']['Workers'].iloc[0]:,}")
print(f"• Health + Hospitals: {df_dept_risk[df_dept_risk['Department'] == 'Health + Hospitals']['Workers'].iloc[0]:,}")
print(f"• Technology Workers (OTI + 2% each agency): {df_dept_risk[df_dept_risk['Department'] == 'Office of Technology']['Workers'].iloc[0]:,}")
```

# 🎯 Risk Assessment Heatmap

```{python}
#| label: risk-heatmap-fixed

# Create Risk Assessment Heatmap with fixed overlapping text
years = list(range(2027, 2034))

# Create a risk matrix: Department vs Year
risk_matrix_data = []

for _, dept in df_dept_risk.iterrows():
    dept_name = dept['Department']
    start_year = dept['Timeline_Start'] 
    end_year = dept['Timeline_End']
    risk_level = dept['Risk_Level']
    
    # Convert risk level to numeric
    risk_map = {'Protected': 1, 'Evolution': 2, 'Low': 2, 'Medium': 3, 'High': 4, 'Critical': 5}
    base_risk = risk_map.get(risk_level, 1)
    
    for year in years:
        if start_year <= year <= end_year:
            # Peak risk during perfect storm period (2030-2032)
            if 2030 <= year <= 2032:
                intensity = min(base_risk + 1, 5)
            else:
                intensity = base_risk
        else:
            intensity = 0  # No risk outside timeline
            
        risk_matrix_data.append({
            'Department': dept_name,
            'Year': year,
            'Risk_Intensity': intensity,
            'Workers': dept['Workers']
        })

# Convert to DataFrame and pivot for heatmap
df_heatmap = pd.DataFrame(risk_matrix_data)
risk_pivot = df_heatmap.pivot(index='Department', columns='Year', values='Risk_Intensity')

# Compact department names for display
dept_name_map = {
    'Dept of Finance': 'Finance',
    '311 Service': '311',
    'Administrative (Other)': 'Admin (Other)',
    'Basic Permit Processing': 'Permits',
    'Office of Technology': 'OTI',
    'Dept Buildings': 'Buildings', 
    'HRA/Social Services': 'HRA/Social',
    'NYPD': 'NYPD',
    'FDNY': 'FDNY',
    'Dept Sanitation': 'Sanitation',
    'Dept of Correction': 'Correction',
    'DOE (Education)': 'Education',
    'Health + Hospitals': 'H+H',
    'Children\'s Services': 'ACS',
    'Health & Mental Hygiene': 'DOHMH',
    'Environmental Protection': 'DEP',
    'Transportation': 'DOT',
    'Parks & Recreation': 'Parks'
}

# Rename index for better visualization display
risk_pivot.index = [dept_name_map.get(name, name) for name in risk_pivot.index]

# Create heatmap with fixed text positioning
plt.figure(figsize=(8.5, 7))
sns.heatmap(risk_pivot, 
            annot=True, 
            cmap='RdYlBu_r',
            center=2.5,
            vmin=0, vmax=5,
            fmt='.0f',
            linewidths=0.3,
            annot_kws={'size': 8},
            cbar_kws={'label': 'Risk Level', 'shrink': 0.8})

plt.title('🎯 Risk Assessment by Department\n(0=No Risk, 5=Critical)', 
          fontsize=12, fontweight='bold', pad=20)
plt.xlabel('Year', fontweight='bold', fontsize=10)
plt.ylabel('Department', fontweight='bold', fontsize=10)

# Highlight Perfect Storm period 
plt.axvspan(3.5, 5.5, alpha=0.15, color='red')
plt.text(4.5, -0.5, 'Perfect Storm', ha='center', va='top',
         fontsize=9, color='red', fontweight='bold')

# Readable fonts
plt.xticks(fontsize=9)
plt.yticks(fontsize=9)

plt.tight_layout()
plt.show()

# Compact summary
storm_period = df_heatmap[(df_heatmap['Year'] >= 2030) & (df_heatmap['Year'] <= 2032)]
storm_summary = storm_period.groupby('Department').agg({
    'Risk_Intensity': 'mean',
    'Workers': 'first'
}).round(1)

high_risk_storm = storm_summary[storm_summary['Risk_Intensity'] >= 4.0].sort_values('Risk_Intensity', ascending=False)
print("\n🚨 Highest Risk During Perfect Storm (2030-2032):")
for dept, data in high_risk_storm.head(5).iterrows():
    short_name = dept_name_map.get(dept, dept)
    print(f"• {short_name}: {data['Risk_Intensity']}/5 ({data['Workers']:,} workers)")
```

## 🔴 HIGH RISK (First Wave: 2027-2029)

**Department of Finance** leads AI implementation because automation provides clear, measurable savings with minimal political resistance. Tax processing automation will reduce clerical audit staff by 30-40% by 2030, while automated compliance monitoring and fraud detection systems outperform human review for identifying suspicious patterns.

**311 Customer Service** represents the easiest political win because AI implementation actually improves service delivery while reducing costs. With 80% of calls being routine inquiries easily handled by AI chatbots, 24/7 availability addresses common complaints about government accessibility while cutting costs.

## 🟡 MEDIUM RISK (Second/Third Wave: 2028-2032)

**Office of Management and Budget** becomes the analytical testing ground for sophisticated AI applications. Budget modeling automation, performance metric dashboards, and cross-agency analysis eliminate routine analytical work while enabling faster decision-making.

**Human Resources Administration** faces the largest numerical impact during the peak pressure period. Benefits eligibility determination, case management support, and fraud prevention become politically acceptable for automation during the sustained fiscal crisis.

## 🟢 PROTECTED (Union/Political Protection)

**Fire Department** and **Police Department** retain protection through roles inherently difficult to automate plus strong political protection, with timelines remaining at 2035+ due to public safety priorities.

# 📈 Worker Category Risk Analysis

```{python}
#| label: worker-category-analysis

# Worker Category Risk Analysis - Updated with accurate NYC municipal workforce (362,640 total)
worker_categories = {
    'Technology Workers': {
        'Automation_Difficulty': 2,  # Low difficulty = high protection
        'Union_Protection': 3,
        'Political_Sensitivity': 2,
        'Fiscal_Pressure_Vulnerability': 2,
        'Timeline_Urgency': 3,
        'Workers': 8918,  # OTI (1,666) + 2% of each agency (7,252)
        'Category': 'Evolution'
    },
    'Administrative': {
        'Automation_Difficulty': 5,  # High difficulty = low protection
        'Union_Protection': 2,
        'Political_Sensitivity': 1,
        'Fiscal_Pressure_Vulnerability': 5,
        'Timeline_Urgency': 5,
        'Workers': 24426,  # DOF + portions of Other agencies
        'Category': 'High Risk'
    },
    'Benefits/Social Services': {
        'Automation_Difficulty': 4,
        'Union_Protection': 4,
        'Political_Sensitivity': 4,
        'Fiscal_Pressure_Vulnerability': 5,
        'Timeline_Urgency': 3,
        'Workers': 21425,  # ACS + DOHMH + portions of Other
        'Category': 'Medium Risk'
    },
    'Public Safety/Uniformed': {
        'Automation_Difficulty': 1,
        'Union_Protection': 5,
        'Political_Sensitivity': 5,
        'Fiscal_Pressure_Vulnerability': 1,
        'Timeline_Urgency': 1,
        'Workers': 85300,  # NYPD + FDNY + DSNY + DOC
        'Category': 'Protected'
    },
    'Education': {
        'Automation_Difficulty': 3,
        'Union_Protection': 4,
        'Political_Sensitivity': 4,
        'Fiscal_Pressure_Vulnerability': 3,
        'Timeline_Urgency': 2,
        'Workers': 138662,  # DOE total
        'Category': 'Medium Risk'
    },
    'Health & Hospitals': {
        'Automation_Difficulty': 2,
        'Union_Protection': 3,
        'Political_Sensitivity': 4,
        'Fiscal_Pressure_Vulnerability': 4,
        'Timeline_Urgency': 3,
        'Workers': 45000,  # H+H
        'Category': 'Medium Risk'
    },
    'Infrastructure/Services': {
        'Automation_Difficulty': 3,
        'Union_Protection': 3,
        'Political_Sensitivity': 3,
        'Fiscal_Pressure_Vulnerability': 3,
        'Timeline_Urgency': 3,
        'Workers': 31827,  # DEP + DOT + Parks + portions of Other
        'Category': 'Medium Risk'
    },
    'Other/Mixed': {
        'Automation_Difficulty': 3,
        'Union_Protection': 3,
        'Political_Sensitivity': 3,
        'Fiscal_Pressure_Vulnerability': 3,
        'Timeline_Urgency': 3,
        'Workers': 7082,  # Remaining to reach 362,640 total
        'Category': 'Medium Risk'
    }
}

# Create narrower subplot layout - stack vertically instead
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 10))

# Bubble chart: Timeline Urgency vs Workers
risk_colors = {'High Risk': colors['critical'], 'Medium Risk': colors['medium'], 
               'Evolution': colors['implementation'], 'Protected': colors['protected']}

for category, data in worker_categories.items():
    ax1.scatter(data['Timeline_Urgency'], data['Workers'], 
               s=data['Fiscal_Pressure_Vulnerability']*80, 
               color=risk_colors[data['Category']], 
               alpha=0.7, label=category)
    
    # Fixed positioning for Administrative text - move to left side
    if category == 'Administrative':
        ax1.annotate(category, (data['Timeline_Urgency'], data['Workers']),
                    xytext=(-45, 15), textcoords='offset points', fontsize=8,
                    bbox=dict(boxstyle='round,pad=0.3', facecolor='white', alpha=0.8))
    else:
        ax1.annotate(category, (data['Timeline_Urgency'], data['Workers']),
                    xytext=(5, 5), textcoords='offset points', fontsize=8)

ax1.set_xlabel('Timeline Urgency (1=Distant, 5=Immediate)', fontweight='bold')
ax1.set_ylabel('Number of Workers', fontweight='bold')
ax1.set_title('📈 Worker Category Risk vs Timeline\nBubble size = Fiscal Vulnerability', 
              fontweight='bold', fontsize=11)
ax1.set_yscale('log')
ax1.grid(True, alpha=0.3)

# Risk distribution pie chart
df_radar = pd.DataFrame([
    {'Category': k, 'Workers': v['Workers'], 'Risk_Level': v['Category']}
    for k, v in worker_categories.items()
])

risk_summary = df_radar.groupby('Risk_Level')['Workers'].sum()
colors_pie = [risk_colors[level] for level in risk_summary.index]

# Create pie chart with adjusted text positioning
wedges, texts, autotexts = ax2.pie(risk_summary.values, labels=risk_summary.index, 
                                   autopct='%1.1f%%', startangle=90,
                                   colors=colors_pie, labeldistance=1.15)

# Manually adjust worker count labels to prevent overlap
label_positions = {
    'Evolution': (1.0, 0.8),  # Move Technology Workers text to the right
    'High Risk': (-0.55, 1.1),
    'Medium Risk': (0.1, -1.2),
    'Protected': (0.1, 1.1)
}

# Clear the default labels and add custom ones
for i, (label, count) in enumerate(zip(risk_summary.index, risk_summary.values)):
    texts[i].set_text('')  # Clear default label
    
    # Add custom positioned label
    if label in label_positions:
        x, y = label_positions[label]
        ax2.text(x, y, f'{label}\n({count:,} workers)', 
                ha='center', va='center', fontsize=9,
                bbox=dict(boxstyle='round,pad=0.3', facecolor='white', alpha=0.8))

ax2.set_title('🎯 Workforce Distribution by Risk Level\nTotal: {:,} Workers'.format(risk_summary.sum()), 
              fontweight='bold', fontsize=11)

plt.tight_layout()
plt.show()

# Print analysis
print("\n📊 Worker Category Analysis (Accurate NYC Municipal Workforce - 362,640 total):")
print("Technology Workers Calculation: OTI (1,666) + 2% of each agency (7,252) = 8,918")
for category, data in worker_categories.items():
    print(f"\n{category}:")
    print(f"  • Risk Level: {data['Category']}")
    print(f"  • Workers: {data['Workers']:,}")
    print(f"  • Timeline Urgency: {data['Timeline_Urgency']}/5")
    print(f"  • Automation Difficulty: {data['Automation_Difficulty']}/5")
```

Recent AI advances and the compressed implementation timeline have significantly shifted risk profiles across worker categories within NYC's 362,640 municipal workforce, requiring substantial revision of assumptions about "safe" jobs.

## Technology Workers: Evolving Roles

Technology workers face the most dramatic shift in prospects. Rather than displacement, they become essential to the transformation process, but with compressed timelines that require rapid adaptation.

**Software Engineers** must become "AI integration specialists" by 2027-2028. While 30% of routine coding is now AI-generated, government systems require human oversight for security, compliance, and complex integration with legacy systems.

**Data Engineers** emerge as the winners because government data complexity requires sophisticated data pipelines that AI cannot navigate without human guidance. They become essential during the 2029 preparation year when agencies scramble to build AI capabilities under fiscal pressure.

**Data Scientists** transform into critical AI interpreters, translating complex model results into actionable policy recommendations during crisis decision-making. Their role becomes essential during 2029-2030 when agencies need rapid but responsible AI deployment under fiscal constraints.

## Administrative Workers: Earlier and More Intense Impact

The compressed timeline intensifies impact on administrative workers. Those in routine data processing, document review, or rules-based decision making face accelerated displacement with minimal preparation time. **311 Customer Service Representatives** face 2027-2028 implementation with 80-90% automation potential, representing immediate cost savings with minimal political resistance during fiscal crisis. **Data Entry and Clerical Staff** across agencies face 2027-2029 phased implementation as perfect automation targets with clear ROI calculations during budget pressure, while **Basic Permit Processing Staff** encounter 2028-2029 automation through digital document processing and rules-based approval systems, accelerated due to fiscal pressure and clear efficiency gains.

# OMD Strategic Advantage

The Department of Sanitation Operations Management Division faces a unique position in the coming transformation - their technical expertise positions them as essential AI implementation leaders rather than subjects of automation.

## Current OMD Workforce and Capabilities (30 Positions)
The OMD technical team includes data scientists and analysts, software engineers and developers, data engineers and database managers, ARCGIS specialists and spatial analysts, and systems architects. This skillset directly aligns with the city's urgent need for AI implementation expertise during the fiscal crisis period.

## Strategic OMD Timeline and Positioning
**2027-2028 Preparation Phase:** OMD becomes essential during the strategic attrition period as agencies begin AI pilot programs. Their expertise in data systems, spatial analysis, and software integration makes them indispensable for developing the efficiency solutions that other departments will need.

**2029 Pressure Cooker Year:** While other departments face uncertainty, OMD's technical capabilities become mission-critical. They transition from traditional sanitation operations support to citywide AI implementation architects.

**2030-2032 Transformation Leadership:** During the perfect storm period, OMD leads citywide AI rollout across departments. Rather than just avoiding displacement, they become transformation leaders with career advancement opportunities.

## Strategic OMD Advantages and Realistic Challenges
**Advantages include** technical expertise that makes them indispensable during crisis, early preparation window before major implementation, and career advancement opportunities as AI implementation leaders.

**However, realistic challenges remain:** accelerated pressure from compressed timelines, high visibility accountability for AI implementation success/failure, political volatility, and organizational uncertainty affects even favored units during fiscal crises.

**Assessment: Strategic Transformation with Balanced Expectations**

OMD faces strategic transformation with cautious optimism - they're better positioned than most departments but must navigate significant organizational turbulence and implementation pressure.

# The Union Factor: Protection and Accelerated Timing

Union affiliation significantly affects displacement timeline and protection level, but fiscal crisis reduces overall protection duration and effectiveness across all categories.

## Strongest Protection (Extended Timeline)
**DC 37 (civilian workers)** maintains maximum political leverage through largest membership, but fiscal crisis weakens negotiating position as the "efficiency or insolvency" narrative gains traction. **Uniformed unions** retain protection through roles inherently difficult to automate plus strong political protection, with timelines remaining at 2035+ due to public safety priorities.

## Moderate Protection (Shortened Windows)
**Professional unions** representing social workers and librarians face role evolution by 2030-2031 rather than 2032-2033 as fiscal pressure reduces political protection for non-essential functions.

## Least Protection (Accelerated Impact)
**Managerial staff** face targeting as "efficiency" opportunities during fiscal crisis when reducing management layers provides both cost savings and political benefits. **Provisionals and non-competitive titles** become first eliminated during 2029 pressure cooker year lacking civil service protections, while **Temporary and part-time workers** face elimination during the strategic attrition period as the easiest targets for immediate cost reduction without political complications.

# Key Takeaways: The Numbers Don't Lie

AI displacement in NYC government follows a predictable pattern shaped by politics, procurement delays, and fiscal cycles. The workers who start preparing now have significant advantages over those who wait for official announcements. The timeline is compressed but manageable—if you act strategically rather than reactively.

## The Compressed Mathematical Reality

The updated fiscal projections create a compressed but intense transformation timeline requiring immediate strategic response. Recession depletes NYC's reserves by 2028, creating the 2029 pressure cooker year when fiscal reality meets political constraints, followed by the 2030-2032 perfect storm implementation period.

## Four Analytical Certainties

1. **The private sector roadmap predicts your future.** Every AI implementation at JPMorgan or Walmart becomes a government template 2-3 years later under fiscal pressure
2. **Political cycles determine timing, fiscal crisis accelerates readiness.** The perfect storm convergence creates optimal but compressed transformation conditions  
3. **Union protection creates shorter delays during crisis.** Collective bargaining extends timelines but fiscal emergency reduces traditional protection effectiveness
4. **Municipal fiscal patterns validate extended implementation window.** Historical analysis confirms the 3+ year transformation timeline despite accelerated onset

## Workforce Reality by 2035

Current projections indicate the NYC government workforce will be 25-30% smaller by 2035, dropping from approximately 362,640 to 254,000-272,000 workers, with transformation compressed into the intense 2030-2032 period. The remaining workforce will consist of workers who adapted quickly to AI collaboration models, those in roles requiring complex human judgment, and positions protected by strong union agreements or political necessity.

## OMD Strategic Positioning Summary

The 30 technical positions within the Department of Sanitation face strategic transformation with compressed but enhanced opportunity. As part of the broader 8,918 technology workers across all agencies (OTI plus 2% of each agency), their technical expertise becomes essential during the 2029 pressure cooker year and positions them as transformation architects during the 2030-2032 perfect storm period. Success depends on positioning during the 2027-2029 preparation period when leadership roles in citywide AI implementation become available.

## Final Reality Check

By 2035, the NYC government workforce will be 25-30% smaller than today, representing a reduction of 90,000-108,000 positions from the current 362,640 municipal workers. The workers still employed will be those who started adapting in 2025, not those who waited for official retraining programs in 2030. The choice isn't whether change is coming—it's whether you'll be ready when it arrives.

Start preparing today. The fiscal math won't wait for your comfort level.

---

:::{.callout-tip}
## Document Status

- ✅ **Environment Setup**: quartofresh kernel active
- ✅ **Fiscal Projections**: Corrected data ($8.5B start, 2028 depletion)
- ✅ **Master Timeline**: Perfect Storm convergence visualization
- ✅ **Risk Heatmap**: Department-by-department analysis  
- ✅ **Worker Category Analysis**: Risk vs timeline correlation
- ✅ **Complete Integration**: HackMD content merged with 4 visualizations
- ✅ **Accurate Workforce Data**: Updated to reflect actual NYC municipal workforce (362,640 total)
- ✅ **Technology Workers**: Calculated using OTI (1,666) + 2% of each agency (7,252) = 8,918 total
:::

*Document generated using Quarto with quartofresh Python environment*
